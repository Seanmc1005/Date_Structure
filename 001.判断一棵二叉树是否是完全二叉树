#include<stdlib.h>
#include<iostream>
#include<stack>
#include<queue>
using namespace std;

typedef struct TreeNode
{
	int val=0;
	struct TreeNode* lchild=nullptr;
	struct TreeNode* rchild=nullptr;
}TreeNode;

bool judgeCompleteBinary_Tree(TreeNode *T) {
	queue<TreeNode*> Queue;
	if (T == nullptr) {
		return true;
	}
	TreeNode* p;
	Queue.push(T); 
	int count = 0;
	while (!Queue.empty()) {
		p = Queue.front();
		Queue.pop();
		count++;
		if (p->lchild != nullptr && p->rchild != nullptr) {
			Queue.push(p->lchild);
			Queue.push(p->rchild);
		}
		else if (p->lchild == nullptr)
			return false;
		else if (p->rchild == nullptr) {
			Queue.push(p->lchild);
			break;
		}
		else 
			break;
	}
	
	while (!Queue.empty()) {
		p = Queue.front();
		Queue.pop();
		if (p->lchild != nullptr || p->rchild != nullptr) return false;
		count++;
	}
	return true;
}

int main()
{
	TreeNode* T=new TreeNode();
	TreeNode* l1 = new TreeNode();
	TreeNode* l2= new TreeNode();
	TreeNode* l3 = new TreeNode();
	T->val = 10;
	l1->val = 9;
	l2->val = 8;
	l3->val = 7;
	T->lchild = l1;
	T->rchild = l2;
	l1->rchild = l3;
	cout << judgeCompleteBinary_Tree(T);
	return 0;
}
